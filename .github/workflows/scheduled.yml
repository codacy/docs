name: Scheduled jobs

on:
  schedule:
   - cron: "15 5 * * 1"

jobs:
  check-broken-links:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.DEPLOYMENT_PERSONAL_ACCESS_TOKEN }}
          submodules: true

      - name: Check for broken links
        id: lychee
        uses: lycheeverse/lychee-action@v1.5.4
        with:
          args: --verbose ./docs/**/*.md ./submodules/chart/docs/**/*.md
          jobSummary: true
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}

      - name: Create issue
        if: steps.lychee.outputs.exit_code != 0
        uses: peter-evans/create-issue-from-file@v4
        with:
          title: Broken link report
          content-filepath: ./lychee/out.md
          labels: report, automated issue

  check-supported-tools:
    runs-on: ubuntu-latest
    env:
      OUTPUT_FILE: ${{ github.workspace }}/supported-tools-report.txt
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.DEPLOYMENT_PERSONAL_ACCESS_TOKEN }}
          submodules: true

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"
          cache: "pip"

      - name: Install dependencies
        run: |
          pip install -r tools/requirements.txt

      - name: Check supported tools
        run: |
          cd tools
          python ./check-supported-tools.py > ${{ env.OUTPUT_FILE }}

      - name: Create issue
        uses: peter-evans/create-issue-from-file@v4
        if: ${{ failure() }}
        with:
          title: Missing supported tools report
          content-filepath: ${{ env.OUTPUT_FILE }}
          labels: report, automated issue

  check-security-tools:
    runs-on: ubuntu-latest
    env:
      OUTPUT_FILE: ${{ github.workspace }}/security-tools-report.txt
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.DEPLOYMENT_PERSONAL_ACCESS_TOKEN }}
          submodules: true

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"
          cache: "pip"

      - name: Install dependencies
        run: |
          pip install -r tools/requirements.txt

      - name: Check tools that report security issues
        run: |
          cd tools
          python ./check-security-tools.py > ${{ env.OUTPUT_FILE }}

      - name: Create issue
        uses: peter-evans/create-issue-from-file@v4
        if: ${{ failure() }}
        with:
          title: Missing security tools report
          content-filepath: ${{ env.OUTPUT_FILE }}
          labels: report, automated issue

  compress-images:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.DEPLOYMENT_PERSONAL_ACCESS_TOKEN }}
          submodules: true

      - name: Compress images
        id: calibre
        uses: calibreapp/image-actions@main
        with:
          githubToken: ${{ secrets.DEPLOYMENT_PERSONAL_ACCESS_TOKEN }}
          ignorePaths: submodules/**
          compressOnly: true

      - name: Create pull request
        if: steps.calibre.outputs.markdown != ''
        uses: peter-evans/create-pull-request@v4
        with:
          title: "clean: Compress images"
          branch-suffix: timestamp
          commit-message: "clean: Compress images"
          body: ${{ steps.calibre.outputs.markdown }}
        env:
          GITHUB_TOKEN: ${{ secrets.DEPLOYMENT_PERSONAL_ACCESS_TOKEN }}
